{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.matchHas = matchHas;\nexports.compileNonPath = compileNonPath;\nexports.prepareDestination = prepareDestination;\n\nvar _extends = require(\"@swc/helpers/lib/_extends.js\").default;\n\nvar _pathToRegexp = require(\"next/dist/compiled/path-to-regexp\");\n\nvar _escapeRegexp = require(\"../../escape-regexp\");\n\nvar _parseUrl = require(\"./parse-url\");\n/**\n * Ensure only a-zA-Z are used for param names for proper interpolating\n * with path-to-regexp\n */\n\n\nfunction getSafeParamName(paramName) {\n  let newParamName = '';\n\n  for (let i = 0; i < paramName.length; i++) {\n    const charCode = paramName.charCodeAt(i);\n\n    if (charCode > 64 && charCode < 91 || charCode > 96 && charCode < 123 // a-z\n    ) {\n      newParamName += paramName[i];\n    }\n  }\n\n  return newParamName;\n}\n\nfunction escapeSegment(str, segmentName) {\n  return str.replace(new RegExp(`:${(0, _escapeRegexp).escapeStringRegexp(segmentName)}`, 'g'), `__ESC_COLON_${segmentName}`);\n}\n\nfunction unescapeSegments(str) {\n  return str.replace(/__ESC_COLON_/gi, ':');\n}\n\nfunction matchHas(req, has, query) {\n  const params = {};\n  const allMatch = has.every(hasItem => {\n    let value;\n    let key = hasItem.key;\n\n    switch (hasItem.type) {\n      case 'header':\n        {\n          key = key.toLowerCase();\n          value = req.headers[key];\n          break;\n        }\n\n      case 'cookie':\n        {\n          value = req.cookies[hasItem.key];\n          break;\n        }\n\n      case 'query':\n        {\n          value = query[key];\n          break;\n        }\n\n      case 'host':\n        {\n          const {\n            host\n          } = (req == null ? void 0 : req.headers) || {}; // remove port from host if present\n\n          const hostname = host == null ? void 0 : host.split(':')[0].toLowerCase();\n          value = hostname;\n          break;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n\n    if (!hasItem.value && value) {\n      params[getSafeParamName(key)] = value;\n      return true;\n    } else if (value) {\n      const matcher = new RegExp(`^${hasItem.value}$`);\n      const matches = Array.isArray(value) ? value.slice(-1)[0].match(matcher) : value.match(matcher);\n\n      if (matches) {\n        if (Array.isArray(matches)) {\n          if (matches.groups) {\n            Object.keys(matches.groups).forEach(groupKey => {\n              params[groupKey] = matches.groups[groupKey];\n            });\n          } else if (hasItem.type === 'host' && matches[0]) {\n            params.host = matches[0];\n          }\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  });\n\n  if (allMatch) {\n    return params;\n  }\n\n  return false;\n}\n\nfunction compileNonPath(value, params) {\n  if (!value.includes(':')) {\n    return value;\n  }\n\n  for (const key of Object.keys(params)) {\n    if (value.includes(`:${key}`)) {\n      value = value.replace(new RegExp(`:${key}\\\\*`, 'g'), `:${key}--ESCAPED_PARAM_ASTERISKS`).replace(new RegExp(`:${key}\\\\?`, 'g'), `:${key}--ESCAPED_PARAM_QUESTION`).replace(new RegExp(`:${key}\\\\+`, 'g'), `:${key}--ESCAPED_PARAM_PLUS`).replace(new RegExp(`:${key}(?!\\\\w)`, 'g'), `--ESCAPED_PARAM_COLON${key}`);\n    }\n  }\n\n  value = value.replace(/(:|\\*|\\?|\\+|\\(|\\)|\\{|\\})/g, '\\\\$1').replace(/--ESCAPED_PARAM_PLUS/g, '+').replace(/--ESCAPED_PARAM_COLON/g, ':').replace(/--ESCAPED_PARAM_QUESTION/g, '?').replace(/--ESCAPED_PARAM_ASTERISKS/g, '*'); // the value needs to start with a forward-slash to be compiled\n  // correctly\n\n  return (0, _pathToRegexp).compile(`/${value}`, {\n    validate: false\n  })(params).slice(1);\n}\n\nfunction prepareDestination(args) {\n  const query = Object.assign({}, args.query);\n  delete query.__nextLocale;\n  delete query.__nextDefaultLocale;\n  delete query.__nextDataReq;\n  let escapedDestination = args.destination;\n\n  for (const param of Object.keys(_extends({}, args.params, query))) {\n    escapedDestination = escapeSegment(escapedDestination, param);\n  }\n\n  const parsedDestination = (0, _parseUrl).parseUrl(escapedDestination);\n  const destQuery = parsedDestination.query;\n  const destPath = unescapeSegments(`${parsedDestination.pathname}${parsedDestination.hash || ''}`);\n  const destHostname = unescapeSegments(parsedDestination.hostname || '');\n  const destPathParamKeys = [];\n  const destHostnameParamKeys = [];\n  (0, _pathToRegexp).pathToRegexp(destPath, destPathParamKeys);\n  (0, _pathToRegexp).pathToRegexp(destHostname, destHostnameParamKeys);\n  const destParams = [];\n  destPathParamKeys.forEach(key => destParams.push(key.name));\n  destHostnameParamKeys.forEach(key => destParams.push(key.name));\n  const destPathCompiler = (0, _pathToRegexp).compile(destPath, // we don't validate while compiling the destination since we should\n  // have already validated before we got to this point and validating\n  // breaks compiling destinations with named pattern params from the source\n  // e.g. /something:hello(.*) -> /another/:hello is broken with validation\n  // since compile validation is meant for reversing and not for inserting\n  // params from a separate path-regex into another\n  {\n    validate: false\n  });\n  const destHostnameCompiler = (0, _pathToRegexp).compile(destHostname, {\n    validate: false\n  }); // update any params in query values\n\n  for (const [key1, strOrArray] of Object.entries(destQuery)) {\n    // the value needs to start with a forward-slash to be compiled\n    // correctly\n    if (Array.isArray(strOrArray)) {\n      destQuery[key1] = strOrArray.map(value => compileNonPath(unescapeSegments(value), args.params));\n    } else {\n      destQuery[key1] = compileNonPath(unescapeSegments(strOrArray), args.params);\n    }\n  } // add path params to query if it's not a redirect and not\n  // already defined in destination query or path\n\n\n  let paramKeys = Object.keys(args.params).filter(name => name !== 'nextInternalLocale');\n\n  if (args.appendParamsToQuery && !paramKeys.some(key => destParams.includes(key))) {\n    for (const key of paramKeys) {\n      if (!(key in destQuery)) {\n        destQuery[key] = args.params[key];\n      }\n    }\n  }\n\n  let newUrl;\n\n  try {\n    newUrl = destPathCompiler(args.params);\n    const [pathname, hash] = newUrl.split('#');\n    parsedDestination.hostname = destHostnameCompiler(args.params);\n    parsedDestination.pathname = pathname;\n    parsedDestination.hash = `${hash ? '#' : ''}${hash || ''}`;\n    delete parsedDestination.search;\n  } catch (err) {\n    if (err.message.match(/Expected .*? to not repeat, but got an array/)) {\n      throw new Error(`To use a multi-match in the destination you must add \\`*\\` at the end of the param name to signify it should repeat. https://nextjs.org/docs/messages/invalid-multi-match`);\n    }\n\n    throw err;\n  } // Query merge order lowest priority to highest\n  // 1. initial URL query values\n  // 2. path segment values\n  // 3. destination specified query values\n\n\n  parsedDestination.query = _extends({}, query, parsedDestination.query);\n  return {\n    newUrl,\n    destQuery,\n    parsedDestination\n  };\n}","map":{"version":3,"mappings":"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","names":["matchHas","compileNonPath","prepareDestination","getSafeParamName","paramName","newParamName","i","length","charCode","charCodeAt","escapeSegment","str","segmentName","replace","RegExp","escapeStringRegexp","unescapeSegments","req","has","query","params","allMatch","every","hasItem","value","key","type","toLowerCase","headers","cookies","host","hostname","split","matcher","matches","Array","isArray","slice","match","groups","Object","keys","forEach","groupKey","includes","compile","validate","args","assign","__nextLocale","__nextDefaultLocale","__nextDataReq","escapedDestination","destination","param","_extends","parsedDestination","parseUrl","destQuery","destPath","pathname","hash","destHostname","destPathParamKeys","destHostnameParamKeys","pathToRegexp","destParams","push","name","destPathCompiler","destHostnameCompiler","strOrArray","entries","map","paramKeys","filter","appendParamsToQuery","some","newUrl","search","err","message","Error"],"sources":["../../../../../shared/lib/router/utils/prepare-destination.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}