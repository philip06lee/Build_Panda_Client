{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.matchHas = matchHas;\nexports.compileNonPath = compileNonPath;\nexports.prepareDestination = prepareDestination;\n\nvar _pathToRegexp = require(\"next/dist/compiled/path-to-regexp\");\n\nvar _escapeRegexp = require(\"../../escape-regexp\");\n\nvar _parseUrl = require(\"./parse-url\");\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction matchHas(req, has, query) {\n  const params = {};\n  const allMatch = has.every(hasItem => {\n    let value;\n    let key = hasItem.key;\n\n    switch (hasItem.type) {\n      case 'header':\n        {\n          key = key.toLowerCase();\n          value = req.headers[key];\n          break;\n        }\n\n      case 'cookie':\n        {\n          value = req.cookies[hasItem.key];\n          break;\n        }\n\n      case 'query':\n        {\n          value = query[key];\n          break;\n        }\n\n      case 'host':\n        {\n          const {\n            host\n          } = (req == null ? void 0 : req.headers) || {}; // remove port from host if present\n\n          const hostname = host == null ? void 0 : host.split(':')[0].toLowerCase();\n          value = hostname;\n          break;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n\n    if (!hasItem.value && value) {\n      params[getSafeParamName(key)] = value;\n      return true;\n    } else if (value) {\n      const matcher = new RegExp(`^${hasItem.value}$`);\n      const matches = Array.isArray(value) ? value.slice(-1)[0].match(matcher) : value.match(matcher);\n\n      if (matches) {\n        if (Array.isArray(matches)) {\n          if (matches.groups) {\n            Object.keys(matches.groups).forEach(groupKey => {\n              params[groupKey] = matches.groups[groupKey];\n            });\n          } else if (hasItem.type === 'host' && matches[0]) {\n            params.host = matches[0];\n          }\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  });\n\n  if (allMatch) {\n    return params;\n  }\n\n  return false;\n}\n\nfunction compileNonPath(value, params) {\n  if (!value.includes(':')) {\n    return value;\n  }\n\n  for (const key of Object.keys(params)) {\n    if (value.includes(`:${key}`)) {\n      value = value.replace(new RegExp(`:${key}\\\\*`, 'g'), `:${key}--ESCAPED_PARAM_ASTERISKS`).replace(new RegExp(`:${key}\\\\?`, 'g'), `:${key}--ESCAPED_PARAM_QUESTION`).replace(new RegExp(`:${key}\\\\+`, 'g'), `:${key}--ESCAPED_PARAM_PLUS`).replace(new RegExp(`:${key}(?!\\\\w)`, 'g'), `--ESCAPED_PARAM_COLON${key}`);\n    }\n  }\n\n  value = value.replace(/(:|\\*|\\?|\\+|\\(|\\)|\\{|\\})/g, '\\\\$1').replace(/--ESCAPED_PARAM_PLUS/g, '+').replace(/--ESCAPED_PARAM_COLON/g, ':').replace(/--ESCAPED_PARAM_QUESTION/g, '?').replace(/--ESCAPED_PARAM_ASTERISKS/g, '*'); // the value needs to start with a forward-slash to be compiled\n  // correctly\n\n  return (0, _pathToRegexp).compile(`/${value}`, {\n    validate: false\n  })(params).slice(1);\n}\n\nfunction prepareDestination(args) {\n  const query = Object.assign({}, args.query);\n  delete query.__nextLocale;\n  delete query.__nextDefaultLocale;\n  delete query.__nextDataReq;\n  let escapedDestination = args.destination;\n\n  for (const param of Object.keys(_extends({}, args.params, query))) {\n    escapedDestination = escapeSegment(escapedDestination, param);\n  }\n\n  const parsedDestination = (0, _parseUrl).parseUrl(escapedDestination);\n  const destQuery = parsedDestination.query;\n  const destPath = unescapeSegments(`${parsedDestination.pathname}${parsedDestination.hash || ''}`);\n  const destHostname = unescapeSegments(parsedDestination.hostname || '');\n  const destPathParamKeys = [];\n  const destHostnameParamKeys = [];\n  (0, _pathToRegexp).pathToRegexp(destPath, destPathParamKeys);\n  (0, _pathToRegexp).pathToRegexp(destHostname, destHostnameParamKeys);\n  const destParams = [];\n  destPathParamKeys.forEach(key => destParams.push(key.name));\n  destHostnameParamKeys.forEach(key => destParams.push(key.name));\n  const destPathCompiler = (0, _pathToRegexp).compile(destPath, // we don't validate while compiling the destination since we should\n  // have already validated before we got to this point and validating\n  // breaks compiling destinations with named pattern params from the source\n  // e.g. /something:hello(.*) -> /another/:hello is broken with validation\n  // since compile validation is meant for reversing and not for inserting\n  // params from a separate path-regex into another\n  {\n    validate: false\n  });\n  const destHostnameCompiler = (0, _pathToRegexp).compile(destHostname, {\n    validate: false\n  }); // update any params in query values\n\n  for (const [key1, strOrArray] of Object.entries(destQuery)) {\n    // the value needs to start with a forward-slash to be compiled\n    // correctly\n    if (Array.isArray(strOrArray)) {\n      destQuery[key1] = strOrArray.map(value => compileNonPath(unescapeSegments(value), args.params));\n    } else {\n      destQuery[key1] = compileNonPath(unescapeSegments(strOrArray), args.params);\n    }\n  } // add path params to query if it's not a redirect and not\n  // already defined in destination query or path\n\n\n  let paramKeys = Object.keys(args.params).filter(name => name !== 'nextInternalLocale');\n\n  if (args.appendParamsToQuery && !paramKeys.some(key => destParams.includes(key))) {\n    for (const key of paramKeys) {\n      if (!(key in destQuery)) {\n        destQuery[key] = args.params[key];\n      }\n    }\n  }\n\n  let newUrl;\n\n  try {\n    newUrl = destPathCompiler(args.params);\n    const [pathname, hash] = newUrl.split('#');\n    parsedDestination.hostname = destHostnameCompiler(args.params);\n    parsedDestination.pathname = pathname;\n    parsedDestination.hash = `${hash ? '#' : ''}${hash || ''}`;\n    delete parsedDestination.search;\n  } catch (err) {\n    if (err.message.match(/Expected .*? to not repeat, but got an array/)) {\n      throw new Error(`To use a multi-match in the destination you must add \\`*\\` at the end of the param name to signify it should repeat. https://nextjs.org/docs/messages/invalid-multi-match`);\n    }\n\n    throw err;\n  } // Query merge order lowest priority to highest\n  // 1. initial URL query values\n  // 2. path segment values\n  // 3. destination specified query values\n\n\n  parsedDestination.query = _extends({}, query, parsedDestination.query);\n  return {\n    newUrl,\n    destQuery,\n    parsedDestination\n  };\n}\n/**\n * Ensure only a-zA-Z are used for param names for proper interpolating\n * with path-to-regexp\n */\n\n\nfunction getSafeParamName(paramName) {\n  let newParamName = '';\n\n  for (let i = 0; i < paramName.length; i++) {\n    const charCode = paramName.charCodeAt(i);\n\n    if (charCode > 64 && charCode < 91 || charCode > 96 && charCode < 123 // a-z\n    ) {\n      newParamName += paramName[i];\n    }\n  }\n\n  return newParamName;\n}\n\nfunction escapeSegment(str, segmentName) {\n  return str.replace(new RegExp(`:${(0, _escapeRegexp).escapeStringRegexp(segmentName)}`, 'g'), `__ESC_COLON_${segmentName}`);\n}\n\nfunction unescapeSegments(str) {\n  return str.replace(/__ESC_COLON_/gi, ':');\n}","map":{"version":3,"mappings":"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","names":["matchHas","compileNonPath","prepareDestination","req","has","query","params","allMatch","every","hasItem","value","key","type","toLowerCase","headers","cookies","host","hostname","split","getSafeParamName","matcher","RegExp","matches","Array","isArray","slice","match","groups","Object","keys","forEach","groupKey","includes","replace","compile","validate","args","assign","__nextLocale","__nextDefaultLocale","__nextDataReq","escapedDestination","destination","param","_extends","escapeSegment","parsedDestination","parseUrl","destQuery","destPath","unescapeSegments","pathname","hash","destHostname","destPathParamKeys","destHostnameParamKeys","pathToRegexp","destParams","push","name","destPathCompiler","destHostnameCompiler","strOrArray","entries","map","paramKeys","filter","appendParamsToQuery","some","newUrl","search","err","message","Error","paramName","newParamName","i","length","charCode","charCodeAt","str","segmentName","escapeStringRegexp"],"sources":["../../../../../shared/lib/router/utils/prepare-destination.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}