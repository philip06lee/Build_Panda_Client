{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRouteRegex = getRouteRegex;\nexports.getNamedRouteRegex = getNamedRouteRegex;\nexports.getMiddlewareRegex = getMiddlewareRegex;\nexports.getNamedMiddlewareRegex = getNamedMiddlewareRegex;\n\nvar _escapeRegexp = require(\"../../escape-regexp\");\n\nvar _removeTrailingSlash = require(\"./remove-trailing-slash\");\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction getRouteRegex(normalizedRoute) {\n  const {\n    parameterizedRoute,\n    groups\n  } = getParametrizedRoute(normalizedRoute);\n  return {\n    re: new RegExp(`^${parameterizedRoute}(?:/)?$`),\n    groups: groups\n  };\n}\n\nfunction getNamedRouteRegex(normalizedRoute) {\n  const result = getNamedParametrizedRoute(normalizedRoute);\n  return _extends({}, getRouteRegex(normalizedRoute), {\n    namedRegex: `^${result.namedParameterizedRoute}(?:/)?$`,\n    routeKeys: result.routeKeys\n  });\n}\n\nfunction getParametrizedRoute(route) {\n  const segments = (0, _removeTrailingSlash).removeTrailingSlash(route).slice(1).split('/');\n  const groups = {};\n  let groupIndex = 1;\n  return {\n    parameterizedRoute: segments.map(segment => {\n      if (segment.startsWith('[') && segment.endsWith(']')) {\n        const {\n          key,\n          optional,\n          repeat\n        } = parseParameter(segment.slice(1, -1));\n        groups[key] = {\n          pos: groupIndex++,\n          repeat,\n          optional\n        };\n        return repeat ? optional ? '(?:/(.+?))?' : '/(.+?)' : '/([^/]+?)';\n      } else {\n        return `/${(0, _escapeRegexp).escapeStringRegexp(segment)}`;\n      }\n    }).join(''),\n    groups\n  };\n}\n\nfunction getNamedParametrizedRoute(route) {\n  const segments = (0, _removeTrailingSlash).removeTrailingSlash(route).slice(1).split('/');\n  const getSafeRouteKey = buildGetSafeRouteKey();\n  const routeKeys = {};\n  return {\n    namedParameterizedRoute: segments.map(segment => {\n      if (segment.startsWith('[') && segment.endsWith(']')) {\n        const {\n          key,\n          optional,\n          repeat\n        } = parseParameter(segment.slice(1, -1)); // replace any non-word characters since they can break\n        // the named regex\n\n        let cleanedKey = key.replace(/\\W/g, '');\n        let invalidKey = false; // check if the key is still invalid and fallback to using a known\n        // safe key\n\n        if (cleanedKey.length === 0 || cleanedKey.length > 30) {\n          invalidKey = true;\n        }\n\n        if (!isNaN(parseInt(cleanedKey.slice(0, 1)))) {\n          invalidKey = true;\n        }\n\n        if (invalidKey) {\n          cleanedKey = getSafeRouteKey();\n        }\n\n        routeKeys[cleanedKey] = key;\n        return repeat ? optional ? `(?:/(?<${cleanedKey}>.+?))?` : `/(?<${cleanedKey}>.+?)` : `/(?<${cleanedKey}>[^/]+?)`;\n      } else {\n        return `/${(0, _escapeRegexp).escapeStringRegexp(segment)}`;\n      }\n    }).join(''),\n    routeKeys\n  };\n}\n/**\n * Parses a given parameter from a route to a data structure that can be used\n * to generate the parametrized route. Examples:\n *   - `[...slug]` -> `{ name: 'slug', repeat: true, optional: true }`\n *   - `[foo]` -> `{ name: 'foo', repeat: false, optional: true }`\n *   - `bar` -> `{ name: 'bar', repeat: false, optional: false }`\n */\n\n\nfunction parseParameter(param) {\n  const optional = param.startsWith('[') && param.endsWith(']');\n\n  if (optional) {\n    param = param.slice(1, -1);\n  }\n\n  const repeat = param.startsWith('...');\n\n  if (repeat) {\n    param = param.slice(3);\n  }\n\n  return {\n    key: param,\n    repeat,\n    optional\n  };\n}\n/**\n * Builds a function to generate a minimal routeKey using only a-z and minimal\n * number of characters.\n */\n\n\nfunction buildGetSafeRouteKey() {\n  let routeKeyCharCode = 97;\n  let routeKeyCharLength = 1;\n  return () => {\n    let routeKey = '';\n\n    for (let i = 0; i < routeKeyCharLength; i++) {\n      routeKey += String.fromCharCode(routeKeyCharCode);\n      routeKeyCharCode++;\n\n      if (routeKeyCharCode > 122) {\n        routeKeyCharLength++;\n        routeKeyCharCode = 97;\n      }\n    }\n\n    return routeKey;\n  };\n}\n\nfunction getMiddlewareRegex(normalizedRoute, options) {\n  const {\n    parameterizedRoute,\n    groups\n  } = getParametrizedRoute(normalizedRoute);\n  const {\n    catchAll = true\n  } = options != null ? options : {};\n\n  if (parameterizedRoute === '/') {\n    let catchAllRegex = catchAll ? '.*' : '';\n    return {\n      groups: {},\n      re: new RegExp(`^/${catchAllRegex}$`)\n    };\n  }\n\n  let catchAllGroupedRegex = catchAll ? '(?:(/.*)?)' : '';\n  return {\n    groups: groups,\n    re: new RegExp(`^${parameterizedRoute}${catchAllGroupedRegex}$`)\n  };\n}\n\nfunction getNamedMiddlewareRegex(normalizedRoute, options) {\n  const {\n    parameterizedRoute\n  } = getParametrizedRoute(normalizedRoute);\n  const {\n    catchAll = true\n  } = options;\n\n  if (parameterizedRoute === '/') {\n    let catchAllRegex = catchAll ? '.*' : '';\n    return {\n      namedRegex: `^/${catchAllRegex}$`\n    };\n  }\n\n  const {\n    namedParameterizedRoute\n  } = getNamedParametrizedRoute(normalizedRoute);\n  let catchAllGroupedRegex = catchAll ? '(?:(/.*)?)' : '';\n  return {\n    namedRegex: `^${namedParameterizedRoute}${catchAllGroupedRegex}$`\n  };\n}","map":{"version":3,"mappings":"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","names":["getRouteRegex","getNamedRouteRegex","getMiddlewareRegex","getNamedMiddlewareRegex","normalizedRoute","parameterizedRoute","groups","getParametrizedRoute","re","RegExp","result","getNamedParametrizedRoute","_extends","namedRegex","namedParameterizedRoute","routeKeys","route","segments","removeTrailingSlash","slice","split","groupIndex","map","segment","startsWith","endsWith","key","optional","repeat","parseParameter","pos","escapeStringRegexp","join","getSafeRouteKey","buildGetSafeRouteKey","cleanedKey","replace","invalidKey","length","isNaN","parseInt","param","routeKeyCharCode","routeKeyCharLength","routeKey","i","String","fromCharCode","options","catchAll","catchAllRegex","catchAllGroupedRegex"],"sources":["../../../../../shared/lib/router/utils/route-regex.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}